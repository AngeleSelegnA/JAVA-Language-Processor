
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 30 17:44:07 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import errors.GestionErroresExp;
import java.util.List;
import java.util.ArrayList;
import ast.*;
import alex.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 30 17:44:07 CEST 2021
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\026" +
    "\004\000\002\026\002\000\002\033\004\000\002\033\004" +
    "\000\002\033\002\000\002\004\003\000\002\004\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\025\004" +
    "\000\002\025\002\000\002\023\005\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\015\005\000\002\014\003\000\002\014\005\000\002\016" +
    "\007\000\002\013\006\000\002\022\010\000\002\022\013" +
    "\000\002\032\005\000\002\032\003\000\002\021\005\000" +
    "\002\027\005\000\002\027\003\000\002\011\010\000\002" +
    "\011\007\000\002\017\011\000\002\017\010\000\002\020" +
    "\011\000\002\020\010\000\002\031\006\000\002\031\004" +
    "\000\002\005\012\000\002\007\007\000\002\007\011\000" +
    "\002\007\012\000\002\007\010\000\002\034\010\000\002" +
    "\034\007\000\002\006\007\000\002\010\010\000\002\024" +
    "\004\000\002\024\002\000\002\012\011\000\002\030\005" +
    "\000\002\030\003\000\002\036\005\000\002\036\003\000" +
    "\002\037\005\000\002\037\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\003\000\002\041\005" +
    "\000\002\041\005\000\002\041\003\000\002\042\004\000" +
    "\002\042\003\000\002\043\006\000\002\043\005\000\002" +
    "\043\005\000\002\043\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\003\000\002\045\004" +
    "\000\002\045\004\000\002\045\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\005\000\002\046\007\000\002\046" +
    "\006\000\002\046\003\000\002\007\006\000\002\007\011" +
    "\000\002\006\006\000\002\006\011\000\002\005\006\000" +
    "\002\005\007\000\002\005\010\000\002\005\014\000\002" +
    "\020\010\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\017\010\000\002\017\011\000\002\017\010" +
    "\000\002\017\011\000\002\011\005\000\002\011\010\000" +
    "\002\021\005\000\002\012\011\000\002\012\011\000\002" +
    "\010\010\000\002\010\010\000\002\014\005\000\002\016" +
    "\007\000\002\016\007\000\002\013\004\000\002\022\010" +
    "\000\002\022\013\000\002\022\010\000\002\022\013\000" +
    "\002\022\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\012\002\ufffb\052\ufffb\053\ufffb\056\ufffb\001" +
    "\002\000\012\002\ufffe\052\012\053\007\056\010\001\002" +
    "\000\004\002\006\001\002\000\004\002\000\001\002\000" +
    "\006\003\u011a\010\u011b\001\002\000\014\004\024\005\026" +
    "\006\033\007\034\054\164\001\002\000\006\002\ufff9\056" +
    "\ufff9\001\002\000\006\003\021\010\022\001\002\000\006" +
    "\002\ufffe\056\010\001\002\000\006\002\ufffa\056\ufffa\001" +
    "\002\000\012\002\ufffc\052\ufffc\053\ufffc\056\ufffc\001\002" +
    "\000\012\002\ufffd\052\ufffd\053\ufffd\056\ufffd\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\015\157\001\002\000\004\015\023\001\002\000\016\003" +
    "\031\004\024\005\026\006\033\007\034\016\uffca\001\002" +
    "\000\006\003\uffeb\010\uffeb\001\002\000\006\003\042\010" +
    "\043\001\002\000\006\003\uffec\010\uffec\001\002\000\056" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013" +
    "\uffe7\016\uffe7\021\uffe7\022\uffe7\030\uffe7\033\uffe7\034\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\055\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\001\002\000\004\016\040\001\002" +
    "\000\004\016\036\001\002\000\014\004\024\005\026\006" +
    "\033\007\034\016\uffca\001\002\000\006\003\uffea\010\uffea" +
    "\001\002\000\006\003\uffe9\010\uffe9\001\002\000\004\016" +
    "\uffcb\001\002\000\004\020\037\001\002\000\012\002\uff8c" +
    "\052\uff8c\053\uff8c\056\uff8c\001\002\000\004\020\041\001" +
    "\002\000\012\002\uffcc\052\uffcc\053\uffcc\056\uffcc\001\002" +
    "\000\006\020\154\041\153\001\002\000\006\020\045\041" +
    "\044\001\002\000\032\003\066\010\051\013\061\021\052" +
    "\022\062\033\064\034\047\046\050\057\046\060\071\061" +
    "\072\062\053\001\002\000\056\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\013\uffe6\016\uffe6\021\uffe6\022" +
    "\uffe6\030\uffe6\033\uffe6\034\uffe6\046\uffe6\050\uffe6\051\uffe6" +
    "\055\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001" +
    "\002\000\004\010\143\001\002\000\022\010\051\013\061" +
    "\021\052\022\062\057\046\060\071\061\072\062\053\001" +
    "\002\000\030\010\051\013\061\021\052\022\062\033\064" +
    "\034\047\046\050\057\046\060\071\061\072\062\053\001" +
    "\002\000\056\011\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\047\uffa3\064\uffa3\065\uffa3\001\002\000\056\011" +
    "\uffa8\012\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8" +
    "\064\uffa8\065\uffa8\001\002\000\056\011\uffa9\012\uffa9\014" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\064\uffa9\065\uffa9" +
    "\001\002\000\056\011\uffac\012\uffac\014\uffac\016\uffac\017" +
    "\uffac\020\uffac\024\uffac\025\uffac\026\uffac\027\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\047\uffac\064\uffac\065\uffac\001\002\000\056" +
    "\011\uffaf\012\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\035\uffaf\036\uffaf\037\135" +
    "\040\134\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047" +
    "\133\064\uffaf\065\uffaf\001\002\000\050\011\uffb3\012\uffb3" +
    "\014\uffb3\016\uffb3\017\uffb3\020\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\064\uffb3\065\uffb3\001\002\000\050\011" +
    "\124\012\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\035\uffb7\036\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\064\125\065\126\001\002" +
    "\000\042\012\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\035\121\036\120\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\001\002\000\030\010" +
    "\051\013\061\021\052\022\062\033\064\034\047\046\050" +
    "\057\046\060\071\061\072\062\053\001\002\000\056\011" +
    "\uffa7\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7" +
    "\064\uffa7\065\uffa7\001\002\000\036\012\uffbc\014\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\024\107\025\106\026\102\027\103" +
    "\041\uffbc\042\104\043\105\044\uffbc\045\uffbc\001\002\000" +
    "\022\010\051\013\061\021\052\022\062\057\046\060\071" +
    "\061\072\062\053\001\002\000\022\012\uffc3\014\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\041\uffc3\044\077\045\uffc3\001\002" +
    "\000\004\020\076\001\002\000\020\012\uffc5\014\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\041\uffc5\045\074\001\002\000\004" +
    "\020\073\001\002\000\056\011\uffab\012\uffab\014\uffab\016" +
    "\uffab\017\uffab\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\047\uffab\064\uffab\065\uffab\001\002" +
    "\000\056\011\uffaa\012\uffaa\014\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\047\uffaa\064\uffaa\065\uffaa\001\002\000\060\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\016" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\030\uffe5\033\uffe5\034\uffe5" +
    "\046\uffe5\050\uffe5\051\uffe5\055\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\001\002\000\030\010\051\013\061" +
    "\021\052\022\062\033\064\034\047\046\050\057\046\060" +
    "\071\061\072\062\053\001\002\000\016\012\uffc6\014\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\041\uffc6\001\002\000\060\003" +
    "\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013\uff89" +
    "\016\uff89\020\uff89\021\uff89\022\uff89\030\uff89\033\uff89\034" +
    "\uff89\046\uff89\050\uff89\051\uff89\055\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\001\002\000\030\010\051\013" +
    "\061\021\052\022\062\033\064\034\047\046\050\057\046" +
    "\060\071\061\072\062\053\001\002\000\020\012\uffc4\014" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\041\uffc4\045\uffc4\001\002" +
    "\000\056\011\uffae\012\uffae\014\uffae\016\uffae\017\uffae\020" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\047\uffae\064\uffae\065\uffae\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\030\010\051" +
    "\013\061\021\052\022\062\033\064\034\047\046\050\057" +
    "\046\060\071\061\072\062\053\001\002\000\022\012\uffc1" +
    "\014\uffc1\016\uffc1\017\uffc1\020\uffc1\041\uffc1\044\uffc1\045" +
    "\uffc1\001\002\000\022\012\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\041\uffc0\044\uffc0\045\uffc0\001\002\000\022\012" +
    "\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\041\uffbd\044\uffbd" +
    "\045\uffbd\001\002\000\022\012\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\041\uffc2\044\uffc2\045\uffc2\001\002\000\022" +
    "\012\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\041\uffbe\044" +
    "\uffbe\045\uffbe\001\002\000\022\012\uffbf\014\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\041\uffbf\044\uffbf\045\uffbf\001\002\000" +
    "\004\014\117\001\002\000\056\011\uffa6\012\uffa6\014\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\064\uffa6\065\uffa6\001" +
    "\002\000\030\010\051\013\061\021\052\022\062\033\064" +
    "\034\047\046\050\057\046\060\071\061\072\062\053\001" +
    "\002\000\030\010\051\013\061\021\052\022\062\033\064" +
    "\034\047\046\050\057\046\060\071\061\072\062\053\001" +
    "\002\000\036\012\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\001\002\000\036\012\uffba\014\uffba" +
    "\016\uffba\017\uffba\020\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\001\002" +
    "\000\030\010\051\013\061\021\052\022\062\033\064\034" +
    "\047\046\050\057\046\060\071\061\072\062\053\001\002" +
    "\000\004\010\130\001\002\000\004\010\127\001\002\000" +
    "\050\011\uffb4\012\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\035\uffb4\036\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\064\uffb4\065\uffb4" +
    "\001\002\000\050\011\uffb5\012\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\035\uffb5" +
    "\036\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\064" +
    "\uffb5\065\uffb5\001\002\000\004\012\132\001\002\000\050" +
    "\011\uffb6\012\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\035\uffb6\036\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\064\uffb6\065\uffb6\001" +
    "\002\000\026\010\051\013\061\021\052\022\062\033\064" +
    "\034\047\057\046\060\071\061\072\062\053\001\002\000" +
    "\026\010\051\013\061\021\052\022\062\033\064\034\047" +
    "\057\046\060\071\061\072\062\053\001\002\000\026\010" +
    "\051\013\061\021\052\022\062\033\064\034\047\057\046" +
    "\060\071\061\072\062\053\001\002\000\050\011\uffb2\012" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\064\uffb2\065\uffb2\001\002\000\050" +
    "\011\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\035\uffb1\036\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\064\uffb1\065\uffb1\001" +
    "\002\000\050\011\uffb0\012\uffb0\014\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\035\uffb0\036" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\064\uffb0" +
    "\065\uffb0\001\002\000\042\012\uffb8\014\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\035\uffb8" +
    "\036\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\001" +
    "\002\000\056\011\uffad\012\uffad\014\uffad\016\uffad\017\uffad" +
    "\020\uffad\024\uffad\025\uffad\026\uffad\027\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\047\uffad\064\uffad\065\uffad\001\002\000\004\013" +
    "\144\001\002\000\032\010\051\013\061\014\145\021\052" +
    "\022\062\033\064\034\047\046\050\057\046\060\071\061" +
    "\072\062\053\001\002\000\056\011\uffa4\012\uffa4\014\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\047\uffa4\064\uffa4\065\uffa4\001" +
    "\002\000\006\014\uffdd\017\151\001\002\000\004\014\150" +
    "\001\002\000\056\011\uffa5\012\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\047\uffa5\064\uffa5\065\uffa5\001\002\000\030" +
    "\010\051\013\061\021\052\022\062\033\064\034\047\046" +
    "\050\057\046\060\071\061\072\062\053\001\002\000\004" +
    "\014\uffde\001\002\000\030\010\051\013\061\021\052\022" +
    "\062\033\064\034\047\046\050\057\046\060\071\061\072" +
    "\062\053\001\002\000\056\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\013\uff8b\016\uff8b\021\uff8b\022\uff8b" +
    "\030\uff8b\033\uff8b\034\uff8b\046\uff8b\050\uff8b\051\uff8b\055" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\001\002" +
    "\000\004\020\156\001\002\000\060\003\uff8a\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\013\uff8a\016\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\030\uff8a\033\uff8a\034\uff8a\046\uff8a\050" +
    "\uff8a\051\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\001\002\000\014\004\024\005\026\006\033\007" +
    "\034\016\uffca\001\002\000\004\016\161\001\002\000\004" +
    "\020\162\001\002\000\012\002\uff8d\052\uff8d\053\uff8d\056" +
    "\uff8d\001\002\000\006\003\u010a\010\u010b\001\002\000\006" +
    "\003\165\010\166\001\002\000\004\013\u0107\001\002\000" +
    "\004\013\167\001\002\000\016\003\172\004\024\005\026" +
    "\006\033\007\034\014\171\001\002\000\004\010\u0104\001" +
    "\002\000\004\015\u0101\001\002\000\004\014\377\001\002" +
    "\000\004\014\174\001\002\000\006\003\176\015\175\001" +
    "\002\000\056\003\211\004\024\005\026\006\033\007\034" +
    "\010\051\013\061\016\uffee\021\052\022\062\030\206\033" +
    "\064\034\047\046\050\050\217\051\200\055\207\057\203" +
    "\060\071\061\072\062\053\063\222\001\002\000\006\002" +
    "\uff98\056\uff98\001\002\000\006\002\uffd8\056\uffd8\001\002" +
    "\000\004\013\353\001\002\000\056\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\013\ufff8\016\ufff8\021\ufff8" +
    "\022\ufff8\030\ufff8\033\ufff8\034\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\001\002\000\004\041\350\001\002\000\006\003\334\010" +
    "\335\001\002\000\056\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\013\ufff3\016\ufff3\021\ufff3\022\ufff3\030" +
    "\ufff3\033\ufff3\034\ufff3\046\ufff3\050\ufff3\051\ufff3\055\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\001\002\000" +
    "\056\003\211\004\024\005\026\006\033\007\034\010\051" +
    "\013\061\016\uffee\021\052\022\062\030\206\033\064\034" +
    "\047\046\050\050\217\051\200\055\207\057\203\060\071" +
    "\061\072\062\053\063\222\001\002\000\004\013\307\001" +
    "\002\000\032\003\303\010\051\013\061\021\052\022\062" +
    "\033\064\034\047\046\050\057\046\060\071\061\072\062" +
    "\053\001\002\000\056\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\013\ufff0\016\ufff0\021\ufff0\022\ufff0\030" +
    "\ufff0\033\ufff0\034\ufff0\046\ufff0\050\ufff0\051\ufff0\055\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002\000" +
    "\004\020\236\001\002\000\056\003\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\013\ufff1\016\ufff1\021\ufff1\022" +
    "\ufff1\030\ufff1\033\ufff1\034\ufff1\046\ufff1\050\ufff1\051\ufff1" +
    "\055\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\001" +
    "\002\000\006\003\241\010\242\001\002\000\004\016\240" +
    "\001\002\000\056\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\013\ufff4\016\ufff4\021\ufff4\022\ufff4\030\ufff4" +
    "\033\ufff4\034\ufff4\046\ufff4\050\ufff4\051\ufff4\055\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\001\002\000\056" +
    "\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013" +
    "\ufff7\016\ufff7\021\ufff7\022\ufff7\030\ufff7\033\ufff7\034\ufff7" +
    "\046\ufff7\050\ufff7\051\ufff7\055\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\001\002\000\004\013\226\001\002" +
    "\000\056\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\013\ufff5\016\ufff5\021\ufff5\022\ufff5\030\ufff5\033\ufff5" +
    "\034\ufff5\046\ufff5\050\ufff5\051\ufff5\055\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002\000\056\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\016" +
    "\ufff6\021\ufff6\022\ufff6\030\ufff6\033\ufff6\034\ufff6\046\ufff6" +
    "\050\ufff6\051\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\001\002\000\030\010\051\013\061\021\052" +
    "\022\062\033\064\034\047\046\050\057\046\060\071\061" +
    "\072\062\053\001\002\000\056\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\013\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\030\ufff2\033\ufff2\034\ufff2\046\ufff2\050\ufff2\051\ufff2" +
    "\055\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\001" +
    "\002\000\004\020\225\001\002\000\056\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\016\uffe8\021" +
    "\uffe8\022\uffe8\030\uffe8\033\uffe8\034\uffe8\046\uffe8\050\uffe8" +
    "\051\uffe8\055\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\001\002\000\032\003\227\010\051\013\061\021\052" +
    "\022\062\033\064\034\047\046\050\057\046\060\071\061" +
    "\072\062\053\001\002\000\004\016\237\001\002\000\004" +
    "\014\231\001\002\000\004\015\232\001\002\000\056\003" +
    "\234\004\024\005\026\006\033\007\034\010\051\013\061" +
    "\016\uffee\021\052\022\062\030\206\033\064\034\047\046" +
    "\050\050\217\051\200\055\207\057\203\060\071\061\072" +
    "\062\053\063\222\001\002\000\056\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\013\uffcd\016\uffcd\021\uffcd" +
    "\022\uffcd\030\uffcd\033\uffcd\034\uffcd\046\uffcd\050\uffcd\051" +
    "\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\001\002\000\006\016\235\020\236\001\002\000\056\003" +
    "\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f" +
    "\016\uff9f\021\uff9f\022\uff9f\030\uff9f\033\uff9f\034\uff9f\046" +
    "\uff9f\050\uff9f\051\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\001\002\000\056\003\uff88\004\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\013\uff88\016\uff88\021\uff88" +
    "\022\uff88\030\uff88\033\uff88\034\uff88\046\uff88\050\uff88\051" +
    "\uff88\055\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
    "\001\002\000\056\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\013\uffa0\016\uffa0\021\uffa0\022\uffa0\030\uffa0" +
    "\033\uffa0\034\uffa0\046\uffa0\050\uffa0\051\uffa0\055\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001\002\000\066" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\013\uffed\016\uffed\021\uffed\022\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\046\uffed\050\uffed\051\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed" +
    "\001\002\000\010\011\272\020\154\041\153\001\002\000" +
    "\010\011\243\020\045\041\044\001\002\000\006\003\244" +
    "\060\246\001\002\000\006\012\264\015\263\001\002\000" +
    "\010\012\253\015\251\016\252\001\002\000\012\012\uffe0" +
    "\015\uffe0\016\uffe0\017\247\001\002\000\004\060\246\001" +
    "\002\000\010\012\uffe1\015\uffe1\016\uffe1\001\002\000\030" +
    "\010\051\013\061\021\052\022\062\033\064\034\047\046" +
    "\050\057\046\060\071\061\072\062\053\001\002\000\004" +
    "\012\255\001\002\000\004\020\254\001\002\000\056\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013\uffe3" +
    "\016\uffe3\021\uffe3\022\uffe3\030\uffe3\033\uffe3\034\uffe3\046" +
    "\uffe3\050\uffe3\051\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\001\002\000\004\020\256\001\002\000" +
    "\056\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\013\uff83\016\uff83\021\uff83\022\uff83\030\uff83\033\uff83\034" +
    "\uff83\046\uff83\050\uff83\051\uff83\055\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\001\002\000\004\016\260\001" +
    "\002\000\004\012\261\001\002\000\004\020\262\001\002" +
    "\000\056\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\013\uffe2\016\uffe2\021\uffe2\022\uffe2\030\uffe2\033\uffe2" +
    "\034\uffe2\046\uffe2\050\uffe2\051\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002\000\004\060\266" +
    "\001\002\000\004\020\265\001\002\000\056\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\010\uff85\013\uff85\016\uff85" +
    "\021\uff85\022\uff85\030\uff85\033\uff85\034\uff85\046\uff85\050" +
    "\uff85\051\uff85\055\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\001\002\000\004\016\267\001\002\000\004\012" +
    "\270\001\002\000\004\020\271\001\002\000\056\003\uff84" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\013\uff84\016" +
    "\uff84\021\uff84\022\uff84\030\uff84\033\uff84\034\uff84\046\uff84" +
    "\050\uff84\051\uff84\055\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\001\002\000\004\060\246\001\002\000\006" +
    "\012\275\015\274\001\002\000\004\060\277\001\002\000" +
    "\004\020\276\001\002\000\056\003\uff87\004\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\013\uff87\016\uff87\021\uff87\022" +
    "\uff87\030\uff87\033\uff87\034\uff87\046\uff87\050\uff87\051\uff87" +
    "\055\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\001" +
    "\002\000\004\016\300\001\002\000\004\012\301\001\002" +
    "\000\004\020\302\001\002\000\056\003\uff86\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\013\uff86\016\uff86\021\uff86" +
    "\022\uff86\030\uff86\033\uff86\034\uff86\046\uff86\050\uff86\051" +
    "\uff86\055\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\001\002\000\004\020\306\001\002\000\004\020\305\001" +
    "\002\000\056\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\013\uffdf\016\uffdf\021\uffdf\022\uffdf\030\uffdf\033" +
    "\uffdf\034\uffdf\046\uffdf\050\uffdf\051\uffdf\055\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\056\003" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\013\uff90" +
    "\016\uff90\021\uff90\022\uff90\030\uff90\033\uff90\034\uff90\046" +
    "\uff90\050\uff90\051\uff90\055\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\001\002\000\032\003\310\010\051\013" +
    "\061\021\052\022\062\033\064\034\047\046\050\057\046" +
    "\060\071\061\072\062\053\001\002\000\004\016\332\001" +
    "\002\000\004\014\312\001\002\000\004\015\313\001\002" +
    "\000\056\003\330\004\024\005\026\006\033\007\034\010" +
    "\051\013\061\016\uffee\021\052\022\062\030\206\033\064" +
    "\034\047\046\050\050\217\051\200\055\207\057\203\060" +
    "\071\061\072\062\053\063\222\001\002\000\062\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\016" +
    "\uffd3\021\uffd3\022\uffd3\030\uffd3\031\316\032\317\033\uffd3" +
    "\034\uffd3\046\uffd3\050\uffd3\051\uffd3\055\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002\000\060\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\016" +
    "\uffd0\021\uffd0\022\uffd0\030\uffd0\031\326\033\uffd0\034\uffd0" +
    "\046\uffd0\050\uffd0\051\uffd0\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\001\002\000\004\015\175\001\002" +
    "\000\004\013\320\001\002\000\030\010\051\013\061\021" +
    "\052\022\062\033\064\034\047\046\050\057\046\060\071" +
    "\061\072\062\053\001\002\000\004\014\322\001\002\000" +
    "\004\015\175\001\002\000\062\003\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\013\uffce\016\uffce\021\uffce\022" +
    "\uffce\030\uffce\031\uffce\032\317\033\uffce\034\uffce\046\uffce" +
    "\050\uffce\051\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\001\002\000\060\003\uffcf\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\013\uffcf\016\uffcf\021\uffcf\022" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\046\uffcf\050\uffcf" +
    "\051\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\001\002\000\056\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2\030" +
    "\uffd2\033\uffd2\034\uffd2\046\uffd2\050\uffd2\051\uffd2\055\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000" +
    "\004\015\175\001\002\000\056\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\013\uffd1\016\uffd1\021\uffd1\022" +
    "\uffd1\030\uffd1\033\uffd1\034\uffd1\046\uffd1\050\uffd1\051\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\001" +
    "\002\000\006\016\331\020\236\001\002\000\056\003\uffa1" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\013\uffa1\016" +
    "\uffa1\021\uffa1\022\uffa1\030\uffa1\033\uffa1\034\uffa1\046\uffa1" +
    "\050\uffa1\051\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\001\002\000\056\003\uffa2\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\013\uffa2\016\uffa2\021\uffa2\022" +
    "\uffa2\030\uffa2\033\uffa2\034\uffa2\046\uffa2\050\uffa2\051\uffa2" +
    "\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\001" +
    "\002\000\004\016\uffef\001\002\000\004\020\347\001\002" +
    "\000\004\013\336\001\002\000\034\003\340\010\051\013" +
    "\061\014\337\021\052\022\062\033\064\034\047\046\050" +
    "\057\046\060\071\061\072\062\053\001\002\000\046\011" +
    "\uffa4\020\346\024\uffa4\025\uffa4\026\uffa4\027\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\047\uffa4\064\uffa4\065\uffa4\001\002\000\004" +
    "\014\344\001\002\000\004\014\342\001\002\000\046\011" +
    "\uffa5\020\343\024\uffa5\025\uffa5\026\uffa5\027\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\047\uffa5\064\uffa5\065\uffa5\001\002\000\056" +
    "\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013" +
    "\uffdc\016\uffdc\021\uffdc\022\uffdc\030\uffdc\033\uffdc\034\uffdc" +
    "\046\uffdc\050\uffdc\051\uffdc\055\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\001\002\000\004\020\345\001\002" +
    "\000\056\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\013\uff91\016\uff91\021\uff91\022\uff91\030\uff91\033\uff91" +
    "\034\uff91\046\uff91\050\uff91\051\uff91\055\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\001\002\000\056\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\016" +
    "\uffdb\021\uffdb\022\uffdb\030\uffdb\033\uffdb\034\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\001\002\000\056\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\013\uff92\016\uff92\021\uff92\022" +
    "\uff92\030\uff92\033\uff92\034\uff92\046\uff92\050\uff92\051\uff92" +
    "\055\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\001" +
    "\002\000\030\010\051\013\061\021\052\022\062\033\064" +
    "\034\047\046\050\057\046\060\071\061\072\062\053\001" +
    "\002\000\004\020\352\001\002\000\056\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\016\uffe4\021" +
    "\uffe4\022\uffe4\030\uffe4\033\uffe4\034\uffe4\046\uffe4\050\uffe4" +
    "\051\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\001\002\000\014\003\356\004\024\005\026\006\033" +
    "\007\034\001\002\000\034\003\362\010\051\013\061\020" +
    "\364\021\052\022\062\033\064\034\047\046\050\057\046" +
    "\060\071\061\072\062\053\001\002\000\006\003\360\010" +
    "\361\001\002\000\004\016\357\001\002\000\056\003\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e\016" +
    "\uff9e\021\uff9e\022\uff9e\030\uff9e\033\uff9e\034\uff9e\046\uff9e" +
    "\050\uff9e\051\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\001\002\000\004\041\153\001\002\000\004" +
    "\041\044\001\002\000\004\016\376\001\002\000\004\020" +
    "\367\001\002\000\004\003\365\001\002\000\004\016\366" +
    "\001\002\000\056\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\013\uff9c\016\uff9c\021\uff9c\022\uff9c\030\uff9c" +
    "\033\uff9c\034\uff9c\046\uff9c\050\uff9c\051\uff9c\055\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002\000\030" +
    "\010\051\013\061\021\052\022\062\033\064\034\047\046" +
    "\050\057\046\060\071\061\072\062\053\001\002\000\004" +
    "\014\371\001\002\000\004\015\372\001\002\000\056\003" +
    "\374\004\024\005\026\006\033\007\034\010\051\013\061" +
    "\016\uffee\021\052\022\062\030\206\033\064\034\047\046" +
    "\050\050\217\051\200\055\207\057\203\060\071\061\072" +
    "\062\053\063\222\001\002\000\056\003\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\013\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\030\uffd4\033\uffd4\034\uffd4\046\uffd4\050\uffd4\051" +
    "\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\001\002\000\006\016\375\020\236\001\002\000\056\003" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b" +
    "\016\uff9b\021\uff9b\022\uff9b\030\uff9b\033\uff9b\034\uff9b\046" +
    "\uff9b\050\uff9b\051\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\001\002\000\056\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d\016\uff9d\021\uff9d" +
    "\022\uff9d\030\uff9d\033\uff9d\034\uff9d\046\uff9d\050\uff9d\051" +
    "\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\001\002\000\004\015\175\001\002\000\006\002\uff99\056" +
    "\uff99\001\002\000\056\003\u0103\004\024\005\026\006\033" +
    "\007\034\010\051\013\061\016\uffee\021\052\022\062\030" +
    "\206\033\064\034\047\046\050\050\217\051\200\055\207" +
    "\057\203\060\071\061\072\062\053\063\222\001\002\000" +
    "\006\002\uffd7\056\uffd7\001\002\000\010\002\uff97\020\236" +
    "\056\uff97\001\002\000\006\014\uffd5\017\u0105\001\002\000" +
    "\012\004\024\005\026\006\033\007\034\001\002\000\004" +
    "\014\uffd6\001\002\000\004\014\u0108\001\002\000\004\015" +
    "\175\001\002\000\006\002\uff9a\056\uff9a\001\002\000\004" +
    "\013\u0117\001\002\000\004\013\u010c\001\002\000\016\003" +
    "\u010e\004\024\005\026\006\033\007\034\014\u010d\001\002" +
    "\000\006\003\u0115\015\175\001\002\000\004\014\u0113\001" +
    "\002\000\004\014\u0110\001\002\000\006\003\u0111\015\175" +
    "\001\002\000\006\002\uff93\056\uff93\001\002\000\006\002" +
    "\uffda\056\uffda\001\002\000\004\015\175\001\002\000\006" +
    "\002\uff95\056\uff95\001\002\000\006\002\uff94\056\uff94\001" +
    "\002\000\006\002\uffd9\056\uffd9\001\002\000\004\014\u0118" +
    "\001\002\000\004\015\175\001\002\000\006\002\uff96\056" +
    "\uff96\001\002\000\004\041\u0127\001\002\000\004\041\u011c" +
    "\001\002\000\004\015\u011d\001\002\000\006\003\u011e\010" +
    "\u0120\001\002\000\004\016\u0125\001\002\000\004\016\u0123" +
    "\001\002\000\006\016\uffc7\023\u0121\001\002\000\004\010" +
    "\u0120\001\002\000\004\016\uffc8\001\002\000\004\020\u0124" +
    "\001\002\000\012\002\uffc9\052\uffc9\053\uffc9\056\uffc9\001" +
    "\002\000\004\020\u0126\001\002\000\012\002\uff8e\052\uff8e" +
    "\053\uff8e\056\uff8e\001\002\000\004\015\u0128\001\002\000" +
    "\004\010\u0120\001\002\000\004\016\u012a\001\002\000\004" +
    "\020\u012b\001\002\000\012\002\uff8f\052\uff8f\053\uff8f\056" +
    "\uff8f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\006\002\004\033\003\001\001\000\016\004" +
    "\012\010\015\012\014\017\013\020\010\026\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\012\017\013\020\010\026\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\031\016\026\024\027\035\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\031\016\026\024\034\035\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\036\067\037\066" +
    "\040\064\041\062\042\057\043\056\044\055\045\054\046" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\141\001\001\000\014\042\140\043\056\044\055\045" +
    "\054\046\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\036\115\037\066\040\064\041\062\042\057\043\056\044" +
    "\055\045\054\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\036" +
    "\074\037\066\040\064\041\062\042\057\043\056\044\055" +
    "\045\054\046\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\037\077\040\064\041\062\042\057\043\056" +
    "\044\055\045\054\046\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\040\114\041\062\042\057\043\056" +
    "\044\055\045\054\046\053\001\001\000\020\040\113\041" +
    "\062\042\057\043\056\044\055\045\054\046\053\001\001" +
    "\000\020\040\112\041\062\042\057\043\056\044\055\045" +
    "\054\046\053\001\001\000\020\040\111\041\062\042\057" +
    "\043\056\044\055\045\054\046\053\001\001\000\020\040" +
    "\110\041\062\042\057\043\056\044\055\045\054\046\053" +
    "\001\001\000\020\040\107\041\062\042\057\043\056\044" +
    "\055\045\054\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\041\122\042\057\043\056\044\055\045\054\046" +
    "\053\001\001\000\016\041\121\042\057\043\056\044\055" +
    "\045\054\046\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\036\130\037\066\040\064\041\062\042\057" +
    "\043\056\044\055\045\054\046\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\137\045" +
    "\054\046\053\001\001\000\010\044\136\045\054\046\053" +
    "\001\001\000\010\044\135\045\054\046\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\146\036\145\037\066\040\064\041\062\042\057\043\056" +
    "\044\055\045\054\046\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\151\036\145\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\002\001\001" +
    "\000\024\036\154\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\031\016" +
    "\026\024\157\035\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\172" +
    "\035\167\001\001\000\002\001\001\000\004\023\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\176" +
    "\001\001\000\056\003\204\005\200\006\215\007\220\011" +
    "\211\013\217\014\214\015\222\016\026\021\203\022\207" +
    "\025\213\035\212\036\201\037\066\040\064\041\062\042" +
    "\057\043\056\044\055\045\054\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\204\005\200\006\215\007\220\011\211\013" +
    "\217\014\214\015\222\016\026\021\203\022\207\025\332" +
    "\035\212\036\201\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\002\001\001" +
    "\000\024\036\303\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\036" +
    "\223\037\066\040\064\041\062\042\057\043\056\044\055" +
    "\045\054\046\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\227\037\066\040\064" +
    "\041\062\042\057\043\056\044\055\045\054\046\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\232" +
    "\001\001\000\056\003\204\005\200\006\215\007\220\011" +
    "\211\013\217\014\214\015\222\016\026\021\203\022\207" +
    "\025\213\035\212\036\201\037\066\040\064\041\062\042" +
    "\057\043\056\044\055\045\054\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\247" +
    "\001\001\000\002\001\001\000\024\036\256\037\066\040" +
    "\064\041\062\042\057\043\056\044\055\045\054\046\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\036\310\037\066\040\064\041\062" +
    "\042\057\043\056\044\055\045\054\046\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\313\001\001" +
    "\000\056\003\204\005\200\006\215\007\220\011\211\013" +
    "\217\014\214\015\222\016\026\021\203\022\207\025\213" +
    "\035\212\036\201\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\004\034\314" +
    "\001\001\000\002\001\001\000\004\023\324\001\001\000" +
    "\002\001\001\000\024\036\320\037\066\040\064\041\062" +
    "\042\057\043\056\044\055\045\054\046\053\001\001\000" +
    "\002\001\001\000\004\023\322\001\001\000\004\034\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\027\340\036\145\037\066" +
    "\040\064\041\062\042\057\043\056\044\055\045\054\046" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\350\037\066\040\064\041\062\042\057\043" +
    "\056\044\055\045\054\046\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\353\035\354\001\001\000" +
    "\024\036\362\037\066\040\064\041\062\042\057\043\056" +
    "\044\055\045\054\046\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\036\367" +
    "\037\066\040\064\041\062\042\057\043\056\044\055\045" +
    "\054\046\053\001\001\000\002\001\001\000\004\023\372" +
    "\001\001\000\056\003\204\005\200\006\215\007\220\011" +
    "\211\013\217\014\214\015\222\016\026\021\203\022\207" +
    "\025\213\035\212\036\201\037\066\040\064\041\062\042" +
    "\057\043\056\044\055\045\054\046\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\377\001\001\000\002\001\001\000\056" +
    "\003\204\005\200\006\215\007\220\011\211\013\217\014" +
    "\214\015\222\016\026\021\203\022\207\025\213\035\212" +
    "\036\201\037\066\040\064\041\062\042\057\043\056\044" +
    "\055\045\054\046\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u0105\035\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u010e\035\167\001\001\000\004\023\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0111\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0128\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {


   private AS as = new AS();

  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= LStructEnum LInsP 
            {
              P RESULT =null;
		LStructEnum dec = (LStructEnum)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Ins> cuerpo = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = new P(cuerpo,dec,0,0);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LInsP ::= InsP LInsP 
            {
              List<Ins> RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Ins> lista = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		lista.add(0, ins);
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LInsP",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LInsP ::= 
            {
              List<Ins> RESULT =null;
		RESULT = new ArrayList<Ins>();
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LInsP",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LStructEnum ::= LStructEnum InsStruct 
            {
              LStructEnum RESULT =null;
		LStructEnum dec = (LStructEnum)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Ins str = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		dec.addS(str); RESULT= dec; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LStructEnum",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LStructEnum ::= LStructEnum InsEnum 
            {
              LStructEnum RESULT =null;
		LStructEnum dec = (LStructEnum)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Ins en = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		dec.addE(en); RESULT= dec; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LStructEnum",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LStructEnum ::= 
            {
              LStructEnum RESULT =null;
		RESULT = new LStructEnum();
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LStructEnum",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InsP ::= InsFun 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsP",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InsP ::= InsProc 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsP",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Ins ::= InsFor 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Ins ::= InsWhile 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Ins ::= InsIf 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Ins ::= InsAsign 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Ins ::= InsDeclarac 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ins ::= InsReturn 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ins ::= InsPrint 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Ins ::= InsCallFun 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Ins ::= InsDeclaracArray 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = ins  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Ins",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIns ::= Ins LIns 
            {
              List<Ins> RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Ins> lista = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lista.add(0,ins);
RESULT = lista  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LIns",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIns ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>();
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LIns",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cuerpo ::= LLAP LIns LLCIERRE 
            {
              List<Ins> RESULT =null;
		List<Ins> lista = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cuerpo",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		RESULT = as.TBool(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		RESULT = as.TInt(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= CHAR 
            {
              Tipo RESULT =null;
		RESULT = as.TChar(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		RESULT = as.TFloat(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InsPrint ::= PRINT Exp0 PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.InsPrint(exp, a.getF(), a.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsPrint",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InsDeclarac ::= InsDeclaracValorIni 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = ins; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclarac",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InsDeclarac ::= Tipo IDEN PUNTOCOMA 
            {
              Ins RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.InsDeclarac(tipo, as.Iden(id.getLexema(),id.getF(),id.getC()),id.getF(),id.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclarac",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // InsDeclaracValorIni ::= Tipo IDEN IGUAL Exp0 PUNTOCOMA 
            {
              Ins RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.InsDeclarac(tipo, as.Iden(id.getLexema(),id.getF(),id.getC()), valor,id.getF(),id.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracValorIni",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InsAsign ::= Exp0 IGUAL Exp0 PUNTOCOMA 
            {
              Ins RESULT =null;
		Exp variable = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT=as.InsAsignac(variable, valor, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsAsign",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsDeclaracArray ::= Tipo IDEN CAP LEntero CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT = as.Array(tipo, as.Iden(id.getLexema(),id.getF(),id.getC()), lista,id.getF(), id.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InsDeclaracArray ::= Tipo IDEN CAP LEntero LLAP Exp0 LLCIERRE CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Exp valorIni = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 RESULT = as.Array(tipo, as.Iden(id.getLexema(),id.getF(), id.getC()),lista, valorIni,id.getF(), id.getC() ); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LEntero ::= ENTERO COMA LEntero 
            {
              List<Integer> RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lista.add(0,Integer.parseInt(ent.getLexema()));
RESULT =lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LEntero",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LEntero ::= ENTERO 
            {
              List<Integer> RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 List<Integer> lista = new ArrayList<Integer>();
lista.add(0, Integer.parseInt(ent.getLexema()));
 RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LEntero",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InsReturn ::= RETURN Exp0 PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp valor = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.InsReturn(valor, a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsReturn",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LArg ::= Exp0 COMA LArg 
            {
              List<Exp> RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Exp> lista = (List<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lista.add(0,exp);
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LArg",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LArg ::= Exp0 
            {
              List<Exp> RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  List<Exp> lista = new ArrayList<Exp>();
lista.add(0,exp);
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LArg",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsCallFun ::= CALL IDEN PAP LArg PCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Exp> args = (List<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		RESULT = as.InsCallFun( as.Iden(id.getLexema(),id.getF(), id.getC()),args, a.getF(), a.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsCallFun ::= CALL IDEN PAP PCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		RESULT = as.InsCallFun( as.Iden(id.getLexema(),id.getF(),id.getC()), a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InsFun ::= FUN Tipo IDEN PAP LParam PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Parametro> listaP = (List<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT  = as.InsFun(tipo, as.Iden(id.getLexema(),id.getF(),id.getC()),listaP,cu, a.getF(), a.getC()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InsFun ::= FUN Tipo IDEN PAP PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.InsFun(tipo, as.Iden(id.getLexema(),id.getF(), id.getC()),cu, a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsProc ::= FUN VOID IDEN PAP LParam PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Parametro> listaP = (List<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.InsProc( as.Iden(id.getLexema(),id.getF(), id.getC()), listaP ,cu, a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InsProc ::= FUN VOID IDEN PAP PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.InsProc( as.Iden(id.getLexema(),id.getF(),id.getC()),cu, a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LParam ::= Tipo IDEN COMA LParam 
            {
              List<Parametro> RESULT =null;
		Tipo tipoP = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Parametro> lista = (List<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lista.add(0,as.Parametro(tipoP, as.Iden(id.getLexema(),id.getF(),id.getC()),id.getF(),id.getC()));
 RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LParam",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LParam ::= Tipo IDEN 
            {
              List<Parametro> RESULT =null;
		Tipo tipoP = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 List<Parametro> lista = new ArrayList<Parametro>();
lista.add(0,as.Parametro(tipoP, as.Iden(id.getLexema(),id.getF(), id.getC()), id.getF(),id.getC()));
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LParam",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InsFor ::= FOR PAP InsDeclaracValorIni Exp0 PUNTOCOMA Exp0 PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Exp paso = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cuerpo = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT=as.InsFor(ins, condicion, paso,cuerpo, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsIf ::= IF PAP Exp0 PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.InsIf( cond,cu, a.getF(), a.getC()) ;   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InsIf ::= IF PAP Exp0 PCIERRE Cuerpo ELSE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Ins> cuif = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cuelse = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.InsIf( cond, cuif, cuelse, a.getF(), a.getC() );   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InsIf ::= IF PAP Exp0 PCIERRE Cuerpo LElif ELSE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		List<Ins> cuif = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Pair<Exp,List<Ins>>> lista = (List<Pair<Exp,List<Ins>>>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cuelse = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		
 List<Exp> lcondelif = new ArrayList<Exp>();
List< List<Ins>> lcuelif = new ArrayList< List<Ins>>(); 
   for(int i = 0; i < lista.size(); ++i){
      lcondelif.add(0,lista.get(i).getKey());
      lcuelif.add(0,lista.get(i).getValue()) ; 
   }

RESULT = as.InsIf( cond, cuif, lcondelif, lcuelif, cuelse,0 , a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsIf ::= IF PAP Exp0 PCIERRE Cuerpo LElif 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Ins> cuif = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Pair<Exp,List<Ins>>> lista = (List<Pair<Exp,List<Ins>>>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		
List<Exp> lcondelif = new ArrayList<Exp>();
List<List<Ins>> lcuelif = new ArrayList<List<Ins>>(); 
   for(int i = 0; i < lista.size(); ++i){
      lcondelif.add(0,lista.get(i).getKey());
      lcuelif.add(0,lista.get(i).getValue()) ; 
   }
RESULT = as.InsIf( cond, cuif, lcondelif, lcuelif, 0 , a.getF(), a.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LElif ::= ELIF PAP Exp0 PCIERRE Cuerpo LElif 
            {
              List<Pair<Exp,List<Ins>>> RESULT =null;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Pair<Exp,List<Ins>>> lista = (List<Pair<Exp,List<Ins>>>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		lista.add(0,new Pair <Exp, List<Ins>> (cond, cu));
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LElif",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LElif ::= ELIF PAP Exp0 PCIERRE Cuerpo 
            {
              List<Pair<Exp,List<Ins>>> RESULT =null;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cu = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		List<Pair<Exp,  List<Ins>>> lista = new ArrayList<Pair<Exp, List<Ins>>>();
lista.add(0,new Pair <Exp, List<Ins>> (cond, cu));
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LElif",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InsWhile ::= WHILE PAP Exp0 PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Exp condicion = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Ins> cuerpo = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT=as.InsWhile(condicion,cuerpo, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InsStruct ::= STRUCT IDEN LLAP ListaDec LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Ins> listaStruct = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		RESULT=as.InsStruct(as.Iden(id.getLexema(),id.getF(),id.getC()), listaStruct, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsStruct",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListaDec ::= InsDeclarac ListaDec 
            {
              List<Ins> RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		List<Ins> lista = (List<Ins>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		lista.add(0,ins);
RESULT=lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDec",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListaDec ::= 
            {
              List<Ins> RESULT =null;
		RESULT =  new ArrayList<Ins>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaDec",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsEnum ::= ENUM IDEN IGUAL LLAP ListaEnum LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		List<Exp> listaE = (List<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		RESULT = as.InsEnum(as.Iden(id.getLexema(),id.getF(),id.getC()),listaE, a.getF(), a.getC())  ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsEnum",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListaEnum ::= IDEN BARRA ListaEnum 
            {
              List<Exp> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		List<Exp> lista = (List<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		lista.add(0,as.Iden(id.getLexema(),id.getF(),id.getC()));
 RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaEnum",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListaEnum ::= IDEN 
            {
              List<Exp> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 List<Exp> lista = new ArrayList<Exp>();
lista.add(0,as.Iden(id.getLexema(),id.getF(), id.getC()));
RESULT = lista;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ListaEnum",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp0 ::= Exp1 OR Exp0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Or(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp0",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp0 ::= Exp1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp0",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp1 ::= Exp2 AND Exp1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT= as.And(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp1",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp1 ::= Exp2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp1",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp2 ::= Exp3 IGUALIGUAL Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.IgualIgual(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= Exp3 MAYOR Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Mayor(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 MENOR Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Menor(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 MAYORIGUAL Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.MayorIgual(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 MENORIGUAL Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.MenorIgual(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp2 ::= Exp3 DISTINTO Exp2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Distinto(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp3 ::= Exp4 SUMA Exp3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Suma(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp3",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp3 ::= Exp4 RESTA Exp3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Resta(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp3",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp3 ::= Exp4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp3",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= NOT Exp4 
            {
              Exp RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Not(exp, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp4",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= Exp5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp4",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp5 ::= Exp5 CAP Exp0 CCIERRE 
            {
              Exp RESULT =null;
		Exp array = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Exp ind = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = as.Corchetes(array, ind, a.getF(), a.getC() );
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp5 ::= Exp5 ACCESOSTRUCT IDEN 
            {
              Exp RESULT =null;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.AccesoStruct(str,as.Iden(id.getLexema(),id.getF(),id.getC()), a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp5 ::= Exp5 ACCESOENUM IDEN 
            {
              Exp RESULT =null;
		Exp en = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.AccesoEnum(en,as.Iden(id.getLexema(),id.getF(),id.getC()), a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp5 ::= Exp6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp6 ::= Exp7 MULTI Exp6 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Multi(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp6 ::= Exp7 DIV Exp6 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Div(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp6 ::= Exp7 MODULO Exp6 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =as.Modulo(exp1,exp2, a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp6 ::= Exp7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp7 ::= MASMAS Exp8 
            {
              Exp RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.MasMas(exp,a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp7",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp7 ::= MENOSMENOS Exp8 
            {
              Exp RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.MenosMenos(exp,a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp7",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp7 ::= Exp8 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp7",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp8 ::= ENTERO 
            {
              Exp RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.NumEntero(ent.getLexema(), ent.getF(), ent.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp8 ::= REAL 
            {
              Exp RESULT =null;
		TokenValue real = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =  as.NumReal(real.getLexema(), real.getF(), real.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp8 ::= CARACTER 
            {
              Exp RESULT =null;
		TokenValue car = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = as.Caracter(car.getLexema(),car.getF(), car.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp8 ::= TRUE 
            {
              Exp RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =  as.True(a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp8 ::= FALSE 
            {
              Exp RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =  as.False(a.getF(), a.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              Exp RESULT =null;
		Exp valorExp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT =  valorExp;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= CALL IDEN PAP LArg PCIERRE 
            {
              Exp RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Exp> largs = (List<Exp>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT =  as.CallFun(as.Iden(id.getLexema(),id.getF(), id.getC()), largs, id.getF(), id.getC());
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp8 ::= CALL IDEN PAP PCIERRE 
            {
              Exp RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		RESULT = as.CallFun( as.Iden(id.getLexema(),id.getF(),id.getC()), id.getF(), id.getC());   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= IDEN 
            {
              Exp RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT =  as.Iden(id.getLexema(),id.getF(), id.getC()) ;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp8",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // InsIf ::= IF PAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.out.println("Error en la condición del if\n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InsIf ::= IF PAP Exp0 PCIERRE LLAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en el cuerpo del if\n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsIf",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InsWhile ::= WHILE PAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en la condición del while\n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InsWhile ::= WHILE PAP Exp0 PCIERRE LLAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en el cuerpo del while\n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsWhile",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InsFor ::= FOR PAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en la declaración/asignacion de la variable del for \n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InsFor ::= FOR PAP InsDeclaracValorIni error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en la condición del for \n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // InsFor ::= FOR PAP InsDeclaracValorIni PUNTOCOMA error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en el paso del for \n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // InsFor ::= FOR PAP InsDeclaracValorIni Exp0 PUNTOCOMA Exp0 PCIERRE LLAP error LLCIERRE 
            {
              Ins RESULT =null;
		 System.err.println("Error en el cuerpo del for \n"); 
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFor",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // InsProc ::= FUN VOID error PAP PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador del procedimiento \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // InsProc ::= FUN VOID IDEN PAP error PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		System.err.println("Error en los parámetros de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // InsProc ::= FUN VOID IDEN PAP LParam PCIERRE error 
            {
              Ins RESULT =null;
		System.err.println("Error en el cuerpo de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // InsProc ::= FUN VOID IDEN PAP PCIERRE LLAP error 
            {
              Ins RESULT =null;
		System.err.println("Error en el cuerpo de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsProc",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // InsFun ::= FUN Tipo error PAP PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // InsFun ::= FUN Tipo IDEN PAP error PCIERRE Cuerpo 
            {
              Ins RESULT =null;
		System.err.println("Error en los parámetros de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // InsFun ::= FUN Tipo IDEN PAP PCIERRE error 
            {
              Ins RESULT =null;
		System.err.println("Error en el cuerpo de la función \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // InsFun ::= FUN Tipo IDEN PAP LParam PCIERRE error 
            {
              Ins RESULT =null;
		System.err.println("Error en el cuerpo de la función \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // InsCallFun ::= CALL error PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador de la función al llamar \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // InsCallFun ::= CALL IDEN PAP error PCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en los parámetros de la función al llamar\n");
RESULT = null;   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // InsReturn ::= RETURN error PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en la expresión del print \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsReturn",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // InsEnum ::= ENUM error IGUAL LLAP ListaEnum LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador del enum \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsEnum",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // InsEnum ::= ENUM IDEN IGUAL LLAP error LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en alguno de los valores del enum \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsEnum",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // InsStruct ::= STRUCT error LLAP ListaDec LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador del struct \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsStruct",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // InsStruct ::= STRUCT IDEN LLAP error LLCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en alguno de los campos del struct \n");
RESULT = null;   
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsStruct",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // InsDeclarac ::= Tipo error PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador de la declaración \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclarac",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // InsDeclaracValorIni ::= Tipo error IGUAL Exp0 PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador de la declaración \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracValorIni",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // InsDeclaracValorIni ::= Tipo IDEN IGUAL error PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el valor de la declaración con valor inicial \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracValorIni",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // InsAsign ::= error PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en la asignación \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsAsign",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // InsDeclaracArray ::= Tipo error CAP LEntero CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador del array \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // InsDeclaracArray ::= Tipo error CAP LEntero LLAP ENTERO LLCIERRE CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el identificador del array \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // InsDeclaracArray ::= Tipo IDEN CAP error CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en las dimensiones del array \n"); 
RESULT = null;  
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // InsDeclaracArray ::= Tipo IDEN CAP error LLAP ENTERO LLCIERRE CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en las dimensiones del array \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // InsDeclaracArray ::= Tipo IDEN CAP LEntero LLCIERRE CCIERRE PUNTOCOMA 
            {
              Ins RESULT =null;
		System.err.println("Error en el valor inicial del array \n");  
RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaracArray",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

