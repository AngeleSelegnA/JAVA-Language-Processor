Programa( 


PROCEDIMIENTO void (NOMBRE: Identificador: (main), PARÁMETROS: , INSTRUCCIONES: Declaración (Tipo: INT Nombre: Identificador: (a) Valor inicial: entero: 4
, Declaración (Tipo: INT Nombre: Identificador: (b) Valor inicial: entero: 3
, Declaración (Tipo: INT Nombre: Identificador: (sol)
, Instrucción If( condición If: menorIdentificador: (a),entero: 0)Instrucciones If: Asignación: Identificador: (sol) = multiplicación Identificador: (a)*entero: 2
, Instrucciones Else: Asignación: Identificador: (sol) = resta(Identificador: (b),entero: 3)
,  )
,  )

, 
 )
(module
(type $_sig_i32ri32 (func (param i32) (result i32)))
(type $_sig_ri32 (func (result i32)))
(type $_sig_void (func ))
(import "runtime" "exceptionHandler" (func $exception (type $_sig_i32)))
(import "runtime" "print" (func $print (type $_sig_i32)))
(import "runtime" "read" (func $read (type $_sig_ri32)))
(memory 20)
(global $SP (mut i32) (i32.const 0)) ;; start of stack
(global $MP (mut i32) (i32.const 0)) ;; mark pointer
(global $NP (mut i32) (i32.const 131071996)) ;; heap 2000*64*1024-4
(func $reserveStack (param $size i32)
(result i32)
get_global $MP
get_global $SP
set_global $MP
get_global $SP
get_local $size
i32.add
set_global $SP
get_global $SP
get_global $NP
i32.gt_u
if
i32.const 3
call $exception
end
)
(func $freeStack (type $_sig_void)
get_global $MP
i32.load offset=4
set_global $SP
get_global $MP
i32.load
set_global $MP
)
(start $main)
(func $main
i32.const 0
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.const 4
i32.store
i32.const 1
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.const 3
i32.store
i32.const 0
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.const 0
i32.lt
if 
i32.const 2
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.add
i32.const 0
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.const 2
i32.mul
i32.store
else 
i32.const 2
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.add
i32.const 1
i32.const 4
i32.mul
get_local ($localsStart)
i32.add
i32.const 3
i32.sub
i32.store
end
)
)